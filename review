import tensorflow as tf
import numpy as np

x_data = np.linspace(-0.5,0.5,200)[:,np.newaxis]
noise = np.random.normal(0,0.02,x_data.shape)
y_data = np.square(x_data) + noise


x = tf.placeholder(tf.float32,[None,1])
y = tf.placeholder(tf.float32,[None,1])

W_L1 = tf.Variable(tf.random_normal([1,10]))
B_L1 = tf.Variable(tf.zeros([1,10]))
W_plus_b_L1 = tf.matmul(x,W_L1) + B_L1
L1 = tf.nn.tanh(W_plus_b_L1)

W_L2 = tf.Variable(tf.random_normal([10,1]))
B_L2 = tf.Variable(tf.zeros([1,1]))
W_plus_b_L2 = tf.matmul(L1,W_L2) + B_L2

prediction = tf.nn.tanh(W_plus_b_L2)
loss = tf.reduce_mean(tf.square(y - prediction))
train = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    for _ in range(2000):
        sess.run(train,feed_dict = {x:x_data,y:y_data})
    pre = sess.run(prediction,feed_dict = {x:x_data})
    print(pre)

